// <auto-generated />
using System;
using Juliapos.Portal.ProductApi.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Juliapos.Portal.ProductApi.Db.Postgres.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    partial class ApiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Juliapos.Portal.ProductApi.Db.Models.DustCategory", b =>
                {
                    b.Property<Guid>("DustCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("dustcategory_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid")
                        .HasColumnName("organization_id");

                    b.Property<int>("Weight")
                        .HasColumnType("integer")
                        .HasColumnName("weight");

                    b.HasKey("DustCategoryId");

                    b.HasIndex("OrganizationId", "Name")
                        .IsUnique();

                    b.ToTable("dustcategory", "product");
                });

            modelBuilder.Entity("Juliapos.Portal.ProductApi.Db.Models.Location", b =>
                {
                    b.Property<Guid>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("location_id");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid")
                        .HasColumnName("external_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid")
                        .HasColumnName("organization_id");

                    b.HasKey("LocationId");

                    b.HasIndex("OrganizationId", "Name")
                        .IsUnique();

                    b.ToTable("location", "product");
                });

            modelBuilder.Entity("Juliapos.Portal.ProductApi.Db.Models.MenuCategory", b =>
                {
                    b.Property<Guid>("MenuCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("menucategory_id");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<string>("IdName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("idname");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid")
                        .HasColumnName("organization_id");

                    b.Property<int>("Weight")
                        .HasColumnType("integer")
                        .HasColumnName("weight");

                    b.HasKey("MenuCategoryId");

                    b.HasIndex("OrganizationId", "Name")
                        .IsUnique();

                    b.ToTable("menucategory", "product");
                });

            modelBuilder.Entity("Juliapos.Portal.ProductApi.Db.Models.MenuCategoryProperty", b =>
                {
                    b.Property<Guid>("MenuCategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("menucategory_id");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uuid")
                        .HasColumnName("property_id");

                    b.HasKey("MenuCategoryId", "PropertyId");

                    b.HasIndex("PropertyId");

                    b.ToTable("menucategoryproperty", "product");
                });

            modelBuilder.Entity("Juliapos.Portal.ProductApi.Db.Models.Organization", b =>
                {
                    b.Property<Guid>("OrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("organization_id");

                    b.Property<Guid?>("ExternalId")
                        .HasColumnType("uuid")
                        .HasColumnName("external_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("OrganizationId");

                    b.ToTable("organization", "product");
                });

            modelBuilder.Entity("Juliapos.Portal.ProductApi.Db.Models.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<bool>("AscendingStock")
                        .HasColumnType("boolean")
                        .HasColumnName("ascendingstock");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("code");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("DustCategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("dustcategory_id");

                    b.Property<bool>("InInventory")
                        .HasColumnType("boolean")
                        .HasColumnName("ininventory");

                    b.Property<Guid>("MenuCategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("menucategory_id");

                    b.Property<string>("MenuName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("menuname");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<float>("Percentage")
                        .HasColumnType("real")
                        .HasColumnName("percentage");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("usercreate");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("userupdate");

                    b.Property<int>("VatLevel")
                        .HasColumnType("integer")
                        .HasColumnName("vatlevel");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DustCategoryId");

                    b.HasIndex("MenuCategoryId");

                    b.ToTable("product", "product");
                });

            modelBuilder.Entity("Juliapos.Portal.ProductApi.Db.Models.ProductCategory", b =>
                {
                    b.Property<Guid>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("productcategory_id");

                    b.Property<string>("DefaultBackColor")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("backcolor");

                    b.Property<string>("DefaultForeColor")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("forecolor");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<string>("IdName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("idname");

                    b.Property<int>("MeasureMethod")
                        .HasColumnType("integer")
                        .HasColumnName("measuremethod");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid")
                        .HasColumnName("organization_id");

                    b.Property<int>("Weight")
                        .HasColumnType("integer")
                        .HasColumnName("weight");

                    b.HasKey("ProductCategoryId");

                    b.HasIndex("OrganizationId", "Name")
                        .IsUnique();

                    b.ToTable("productcategory", "product");
                });

            modelBuilder.Entity("Juliapos.Portal.ProductApi.Db.Models.ProductVariation", b =>
                {
                    b.Property<Guid>("ProductVariationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("productvariation_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("sku");

                    b.HasKey("ProductVariationId");

                    b.HasIndex("ProductId");

                    b.ToTable("productvariation", "product");
                });

            modelBuilder.Entity("Juliapos.Portal.ProductApi.Db.Models.ProductVariationLocation", b =>
                {
                    b.Property<Guid>("ProductVariationLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("productvariationlocation_id");

                    b.Property<DateTime?>("ChangeDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("changedatetime");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_id");

                    b.Property<float?>("MaxAmount")
                        .HasColumnType("real")
                        .HasColumnName("maxamount");

                    b.Property<float?>("MinAmount")
                        .HasColumnType("real")
                        .HasColumnName("minamount");

                    b.Property<int?>("NextStatus")
                        .HasColumnType("integer")
                        .HasColumnName("nextstatus");

                    b.Property<TimeOnly?>("OnMenuEnd")
                        .HasColumnType("time without time zone")
                        .HasColumnName("onmenuend");

                    b.Property<TimeOnly?>("OnMenuStart")
                        .HasColumnType("time without time zone")
                        .HasColumnName("onmenustart");

                    b.Property<Guid>("ProductVariationId")
                        .HasColumnType("uuid")
                        .HasColumnName("productvariation_id");

                    b.Property<bool?>("ShowOnFavoritePage")
                        .HasColumnType("boolean")
                        .HasColumnName("favorite");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<float?>("Transport")
                        .HasColumnType("real")
                        .HasColumnName("transport");

                    b.Property<float?>("UnitPrice")
                        .HasColumnType("real")
                        .HasColumnName("unitprice");

                    b.Property<float?>("UnitPricePurchase")
                        .HasColumnType("real")
                        .HasColumnName("unitpricepurchase");

                    b.HasKey("ProductVariationLocationId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProductVariationId");

                    b.ToTable("productvariationlocation", "product");
                });

            modelBuilder.Entity("Juliapos.Portal.ProductApi.Db.Models.Property", b =>
                {
                    b.Property<Guid>("PropertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("property_id");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<string>("IdName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("idname");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid")
                        .HasColumnName("organization_id");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("typename");

                    b.HasKey("PropertyId");

                    b.HasIndex("OrganizationId", "Name")
                        .IsUnique();

                    b.ToTable("property", "product");
                });

            modelBuilder.Entity("Juliapos.Portal.ProductApi.Db.Models.PropertyValue", b =>
                {
                    b.Property<Guid>("PropertyValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("propertyvalue_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uuid")
                        .HasColumnName("property_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("PropertyValueId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PropertyId");

                    b.ToTable("propertyvalue", "product");
                });

            modelBuilder.Entity("Juliapos.Portal.ProductApi.Db.Models.SelectionPage", b =>
                {
                    b.Property<Guid>("SelectionPageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("selectionpage_id");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<string>("IdName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("idname");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid")
                        .HasColumnName("organization_id");

                    b.Property<int>("Weight")
                        .HasColumnType("integer")
                        .HasColumnName("weight");

                    b.HasKey("SelectionPageId");

                    b.HasIndex("OrganizationId", "Name")
                        .IsUnique();

                    b.ToTable("selectionpage", "product");
                });

            modelBuilder.Entity("Juliapos.Portal.ProductApi.Db.Models.SelectionPageProduct", b =>
                {
                    b.Property<Guid>("SelectionPageProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("selectionpageproduct_id");

                    b.Property<string>("BackColor")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("backcolor");

                    b.Property<int>("ColumnIdx")
                        .HasColumnType("integer")
                        .HasColumnName("column");

                    b.Property<string>("ForeColor")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("forecolor");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<int>("RowIdx")
                        .HasColumnType("integer")
                        .HasColumnName("row");

                    b.Property<Guid>("SelectionPageId")
                        .HasColumnType("uuid")
                        .HasColumnName("selectionpage_id");

                    b.HasKey("SelectionPageProductId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SelectionPageId");

                    b.ToTable("selectionpageproduct", "product");
                });

            modelBuilder.Entity("Juliapos.Portal.ProductApi.Db.Models.Location", b =>
                {
                    b.HasOne("Juliapos.Portal.ProductApi.Db.Models.Organization", "Organization")
                        .WithMany("Locations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Juliapos.Portal.ProductApi.Db.Models.MenuCategoryProperty", b =>
                {
                    b.HasOne("Juliapos.Portal.ProductApi.Db.Models.MenuCategory", null)
                        .WithMany()
                        .HasForeignKey("MenuCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Juliapos.Portal.ProductApi.Db.Models.Property", null)
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Juliapos.Portal.ProductApi.Db.Models.Product", b =>
                {
                    b.HasOne("Juliapos.Portal.ProductApi.Db.Models.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Juliapos.Portal.ProductApi.Db.Models.DustCategory", "DustCategory")
                        .WithMany("Products")
                        .HasForeignKey("DustCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Juliapos.Portal.ProductApi.Db.Models.MenuCategory", "MenuCategory")
                        .WithMany("Products")
                        .HasForeignKey("MenuCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DustCategory");

                    b.Navigation("MenuCategory");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("Juliapos.Portal.ProductApi.Db.Models.ProductCategory", b =>
                {
                    b.HasOne("Juliapos.Portal.ProductApi.Db.Models.Organization", "Organization")
                        .WithMany("ProductCategories")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Juliapos.Portal.ProductApi.Db.Models.ProductVariation", b =>
                {
                    b.HasOne("Juliapos.Portal.ProductApi.Db.Models.Product", "Product")
                        .WithMany("ProductVariations")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Juliapos.Portal.ProductApi.Db.Models.ProductVariationLocation", b =>
                {
                    b.HasOne("Juliapos.Portal.ProductApi.Db.Models.Location", "Location")
                        .WithMany("ProductVariationLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Juliapos.Portal.ProductApi.Db.Models.ProductVariation", "ProductVariation")
                        .WithMany("ProductVariationLocations")
                        .HasForeignKey("ProductVariationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("ProductVariation");
                });

            modelBuilder.Entity("Juliapos.Portal.ProductApi.Db.Models.PropertyValue", b =>
                {
                    b.HasOne("Juliapos.Portal.ProductApi.Db.Models.Product", "Product")
                        .WithMany("PropertieValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Juliapos.Portal.ProductApi.Db.Models.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Juliapos.Portal.ProductApi.Db.Models.SelectionPageProduct", b =>
                {
                    b.HasOne("Juliapos.Portal.ProductApi.Db.Models.Product", "Product")
                        .WithMany("SelectionPageProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Juliapos.Portal.ProductApi.Db.Models.SelectionPage", "SelectionPage")
                        .WithMany("SelectionPageProducts")
                        .HasForeignKey("SelectionPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SelectionPage");
                });

            modelBuilder.Entity("Juliapos.Portal.ProductApi.Db.Models.DustCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Juliapos.Portal.ProductApi.Db.Models.Location", b =>
                {
                    b.Navigation("ProductVariationLocations");
                });

            modelBuilder.Entity("Juliapos.Portal.ProductApi.Db.Models.MenuCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Juliapos.Portal.ProductApi.Db.Models.Organization", b =>
                {
                    b.Navigation("Locations");

                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("Juliapos.Portal.ProductApi.Db.Models.Product", b =>
                {
                    b.Navigation("ProductVariations");

                    b.Navigation("PropertieValues");

                    b.Navigation("SelectionPageProducts");
                });

            modelBuilder.Entity("Juliapos.Portal.ProductApi.Db.Models.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Juliapos.Portal.ProductApi.Db.Models.ProductVariation", b =>
                {
                    b.Navigation("ProductVariationLocations");
                });

            modelBuilder.Entity("Juliapos.Portal.ProductApi.Db.Models.SelectionPage", b =>
                {
                    b.Navigation("SelectionPageProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
